
MongoDB Shell Methods demonstrated during the Webex sessions
============================================================
> use mydb  --> CREATE a new database if not exist OR SWITCH to another database
> db        --> displays the current Database
> show dbs  --> displays the list of databases available which have atleast one COLLECTION (alias of TABLE)

> db.createCollection("myColl") --> Creates a collection
> show collections              --> Lists all collections



Insert functions
================
> db.myColl.insert({num:10}) --> INSERTS a document in the collection "myColl" OR CREATES NEW COLLECTION if not exists in current db
> db.myColl.find()           --> Fetches all the documents present in the collection "myColl"

Second time inserting 10 "value" for "key" num, but _id field will be different.
> db.myColl.insert({num:10}) --> Inserts a document in the collection "myColl"

Explicitly assigning _id field
> db.myColl.insert({_id: 1, num: 20})

Try assigning the same value to _id field => gives duplicate key error index
> db.myColl.insert({_id: 1, num: 30})

Try assigning different value for _id field => it will go through
> db.myColl.insert({_id: 2, num: 30, gum: "ra"})

Multiple documents (records) , within []
> db.myColl.insert([{num:50, gum: "ra"}, {num:60}, {num:70, tum: "ta"}])

-----------------------------------
insertOne
> db.myColl.insertOne({num: 40})

insertMany documents (alias of record)
> db.myColl.insertMany([{num:50, gum: "ra"}, {num:60}, {num:70, tum: "ta"}])



Query Operators
===============
> db.myColl.find()           --> alias of  "select *"
(OR)
> db.myColl.find({})

> db.myColl.find({num:10})   --> returns a document , alias of  "where" num = 10 of document

findOne - Variation of find  --> Used to return the first occurence as per the natural order of the document
> db.myColl.findOne({num:10})    // returns a single document , alias of  "limit" = 1

Projection
----------
// NOTE : "true"  specifies that only this field to be shown.
        : "false" specifies that except this all to be shown.
        : So MIX of "true" and "false" over fields will throw ERROR.
        : however "_id" field is an EXCEPTION to above.

> db.myColl.find({num:10}, {_id: 0})     // first JSON is for condition (like where), second JSON is for projection (alias of "select")
                                         // eg:- here DONOT show _id key for documents
(OR)
> db.myColl.find({num:10}, {_id: false})


> db.myColl.find({}, {name: 1})          // SHOW only name, _id key(s) in ALL documents as first JSON is {}
                                        // _id is default key selected unless suppressed explicitly, ie _id:0
(OR) 
> db.myColl.find({}, {name: true})



JavaScript functionality in Mongo Shell
========================================
Generating a collection for demonstration of operators                              // LOOP
> for(var i=1; i<=15; i++) { db.numbers.insert({x:i, y: Math.floor((Math.random() * 100) + 1)}) }

> db.numbers.find({x: {$gt: 10}}, {_id: 0, x: 1})                                   // Display all x values where x is greater than 10

> db.numbers.find({y: {$lte: 50}}, {_id: 0, y: 1})                                 // Display all y values where y is less than or equal to 50

// Range
> db.numbers.find({x: {$gt: 10, $lt:15}}, {_id: 0, x: 1})                          // Display all x values where x is greater than 10 and less than 15

// Implicit Logical operator  [ AND ].  Multiple conditions are evaluated with AND by DEFAULT
> db.numbers.find({x: {$gt: 10}, y: {$lt: 50}}, {_id: 0, x: 1, y: 1})              // Display x and y values where x is greater than 10 AND y is less than 50 

// Explicit AND  [ $and ]
> db.numbers.find({$and: [{x: {$gt: 10}}, {y: {$lt: 50}}]}, {_id: 0, x: 1, y: 1}) // Display x and y values where x is greater than 10 AND y is less than 50

// Explicit OR (No implicit OR by DEFAULT) [ $or ]
> db.numbers.find({$or: [{x: {$gt: 10}}, {y: {$lt: 50}}]}, {_id: 0, x: 1, y: 1}) // Display x and y values where x is greater than 10 OR y is less than 50

// Not equality operator [ $ne ]
> db.numbers.find({x: {$ne: 10}}, {_id: 0, x: 1})                               // Display all x values where x is Not equal to 10

// Selected values of x  [ $in ]
> db.numbers.find({x: {$in: [5,10,15]}}, {_id: 0, y: 1})                       // Display y values for selected values of x



REGEX SEARCH
=============
// WRITE REGEX PATTERN within (forward slashes)  ie  /regex_pattern/

// Case sensitive search  
                          [ Starting with - ^ ]
> db.names.find({name: {$regex:/^R/}}, {_id: 0})
> db.names.find({name: {$regex:/^r/}}, {_id: 0})

// Case insensitive search --> use  /regex_pattern/i

> db.names.find({name: {$regex:/^R/i}}, {_id: 0})

//                        [ Ending with - $ ]
> db.names.find({name: {$regex:/n$/i}}, {_id: 0})



UPDATE operations
=================
WRONG way of doing update - This CHANGES the ENTIRE document, it is not a field level update
> db.numbers.find({x:10})          // Show the document where x = 10 and note down _id field
> db.numbers.update({x:10}, {y:75})
> db.numbers.find({x:10})          // will not return any document
> db.numbers.find({y:75})          // Shows the _id field which is same as above


Performing the STANDARD way of update - at a field level  [ $set ]
> db.numbers.update({x:10}, {$set: {y:70})    // UPDATE or ADD new field if not exists to match

> db.numbers.update({x:10}, {$set: {z:100})   // ADDS a new field to this document alone whereas other documents will not have z


Mutiple Updates
---------------
> db.numbers.update({x:10}, {$set: {y:55}})                 // Default behaviour of MongoDB update is to update the first matching document

// use {multi: true} as arg to update
> db.numbers.update({x:10}, {$set: {y:55}}, {multi:true})  // Will update all documents matching the condition


Variants of generic update methods (Introduced from 3.2 version onwards)
----------------------------------
> db.numbers.updateOne({x:10}, {$set: {y:105}})   // Updates first matching document

> db.numbers.updateMany({x:10}, {$set: {y:110}})  // Updates all documents matching condition


Polymorphic behaviour of update - UPSERT
----------------------------------------
> db.numbers.find({x:16}) // Assume exists
> db.numbers.find({x:17}) // Assume does not exist

> db.numbers.update({x:16}, {$set: {y:75}}, {upsert: true})               // Update ALL documents where x:16 as match found

> db.numbers.update({x:17}, {$set: {y:75}}, {multi: true, upsert: true})  // Insert x:17 document as no match found for it



Check if a field exists in a document
--------------------------------------
> db.numbers.find({z: {$exists: true}})           // returns all documents with z field

> db.numbers.find({z: {$exists: false}})          // returns all documents without z field


To remove a field from document in the update operation  [ $unset ]
---------------------------------------------------------------------
> db.numbers.update({x:10}, {$unset: {z:""}})  // Don't use {$set: {z:null} for unsetting, null will become a value in MongoDB.
> db.numbers.find({z:{$exists:true}})          // Verify removal
> db.numbers.find({x:10})                      // Verify removal - another way

Setting a field to null does not remove the field
> db.numbers.update({x:10}, {$set: {z:100})
> db.numbers.update({x:10}, {$set: {z:null})
> db.numbers.find({x:10})                      // Will display the document with z having a value null
> db.numbers.find({z:{$exists:true}})          // It shows the field z exists.



Increment or decrement a field value
------------------------------------
> db.numbers.update({x:10}, {$inc: {y:30}}, {multi: true})   // Increments the value of y by 30 for ALL where x is 10

> db.numbers.update({x:10}, {$inc: {y:-30}})                 // Decrements the value of y by 30 for first document where x is 10



Multiply
--------
> db.numbers.update({x:10}, {$mul: {y:2}})                   // Multiplies the value of y by 2

// Multiply can take fractional value or decimal value
// As NO explicit operator for division
> db.numbers.update({x:10}, {$mul: {y:0.5}})                 // Multiplies the value of y by 0.5 (i.e divides by 2)



Max
---
> db.numbers.update({x:10}, {$max: {y:100}})                 // check if DB value of y or this value (100) is max and assign

> db.numbers.update({x:10}, {$max: {y:150}}, {multi: true})


Min
---
> db.numbers.update({x:10}, {$min: {y:20}})                 // check if DB value of y or this value (20) is min and assign

> db.numbers.update({x:10}, {$min: {y:200}})



Update operators using operations on specific ARRAY type data
-------------------------------------------------------------
These operators are exclusively used with array types

> db.arrays.insert({x:1, y:[1,2,3,4,5]})

> db.arrays.update({x:1}, {$push: {y:6}})                  // Adds a value to array at the end

                                                           // Add value to $position specified of the array
                                                           // NOTE : use of $each , even for a single value
> db.emp.update({x: {$exists: true}}, {$push: {x: {$each: ["A"], $position: 1}}} ,{multi: true})
                                                
> db.arrays.update({x:1}, {$pop: {y:1}})                   // Pop a value from the end of array , (accepts only 1 or -1)

> db.arrays.update({x:1}, {$pop: {y:-1}})                  // Pop a value from the beginning of array , (accepts only 1 or -1)

> db.arrays.update({x:1}, {$push: {y:{$each:[6,7,8,9,10]}}})  // Adds multiple values to array at the end

> db.arrays.update({y:1}, {$pull: {y:6}}, {multi: true})      // Removes all occurences of 6 from all array which have 1

> db.arrays.update({y:1}, {$pullAll: {y:[7,8,9,10]}})         // Removes all occurences of 7,8,9,10 from the array which have 1


PREVENT DUPLICATE vals -- addToSet
-----------------------------------
> db.arrays.update({x:1}, {$push: {y:6}}) 
> db.arrays.update({x:1}, {$push: {y:6}})                          // Duplicate 6 is added

> db.arrays.update({x:1}, {$addToSet: {y:6}})                      // Will not add 6 [ if 6 exists in the array ]
> db.arrays.update({x:1}, {$addToSet: {y:7}})                      // Will add 7     [ if 7 does not exist in the array ]

> db.arrays.update({x:1}, {$addToSet: {y:{$each:[6,7,8,9,10]}}})   // Adds only unique values, which are not already in array


REPLACE the value(s) in the array
---------------------------------
> db.arrays.update({y:7}, {$set:{"y.$":75}})                 // ".$" : Replaces 7 in the array to 75 - change only first occurrence
                                                             // NOTE : USE of POSITIONAL OPERATOR $ , makes use of val from query

> db.emp.update({_id:7}, {$set: {"mark.$[]": 16}})           // ".$[]" : Replaces ALL values in the array to 16

                                                             // ".$[<identifier>]" : Replaces ALL 8 in array with 9025
                                                             // NOTE : <identifier> must begin with a lowercase letter and contain only alphanumeric character
                                                                     : use of arrayFilters with <identifier>
> db.emp.update({_id:7}, {$set: {"mark.$[element]": 9025}}, {arrayFilters: [{element: 8}]})


Projecting a value from the array
----------------------------------
> db.arrays.find({y:75}, {"y.$":1})                          // Displays 75 from all documents with y having 75 value



DELETE operations
=================
> db.dropDatabase()                  // DROP current DATABASE

> db.myColl.drop()                   // DROP collection

> db.mycoll.remove({})               //  WARNING: {} : This will delete all documents in the collection

> db.mycoll.remove({x:{$exists:true}})   // Use with condition specified.
                                         // UPDATE by default will update only one document. REMOVE by default will remove all matching documents

> db.mycoll.deleteOne({x:10})        // Delete one document

> db.mycoll.deleteMany({x:10})       // Delete all matching documents



Indexes
=========
// INDEX provides faster retrieval of data by DB by making internal SORTED collections
// By default, name of the index is field name ie "_id" and sort order. You can provide your own index names also.
// ascending order is 1, descending order is -1

> db.numbers.createIndex({y:1})    // index on y - ascending sort order
> db.numbers.createIndex({y:-1})   // index on y - descending sort order
> db.numbers.getIndexes()          // return(s) index(s)

> db.numbers.find({}, {_id:0, y:1})
> db.numbers.insert({x:18, y:75})


EXPLAIN
--------
> db.numbers.find({x:7}).explain()               // This will explain the usage of index, which index will be used or rejected, but not execute the query.

> db.numbers.find({x:7}).explain("executionStats")  // provides execution stats along with usage of index
                                                    // COLLSCAN = Collection Scan - It means Full Scan.
                                                    // If index was used, it will appear as "IXSCAN" (Index Scan).

Unique constraints
-------------------
// By default, indexes do not enforce unique constraints on fields for which index to be created

> db.numbers.createIndex({x:1}, {unique:true})      // If there are duplicates of field for which index created, unique constraint index creation will FAIL
> db.numbers.getIndexes()
> db.numbers.find({x:7}).explain("executionStats")


How to hint (FORCE) to MongoDB to use a particular index
---------------------------------------------------------
> db.numbers.find({y: {$gt:75}}, {_id:0, y:1}).hint({y:-1}))    // Use particular INDEX , will give error if that INDEX not exists

> db.numbers.find({y: {$gt:75}}, {_id:0, y:1}).hint({y:-1})).explain("executionStats")


Compound Indexes
----------------
> db.numbers.createIndex({x:1,y:1}, {name:"myIndex"})
> db.numbers.getIndexes()


Drop index
----------
> db.numbers.dropIndex("myIndex")       // Will drop index with NAME : "myIndex"
> db.numbers.dropIndexes()   		// Will drop all indexes except "_id_"
> db.numbers.dropIndex("_id_")   	// Cannot drop index of _id field



Aggregation Frameworks
======================
Importing Employee Collection into the MongoDB database
-------------------------------------------------------
mongoimport --db adb --collection employees --file employees.json

// The below aggregation command will first filter all the employees belonging to "Bangalore", then sort by name, skip the first 3 employees, and display 5 employees, projecting only the "name" field.
> db.employees.aggregate([
	{ $match: { location: "Bangalore" } },
	{ $sort: { name: 1} },
	{ $skip: 3 },
	{ $limit: 5 },
	{ $project: {
		_id: 0,
		name: 1} },
  ])




GridFS
=======

These commands can be run from any dir (provided env variables for MONGO are set)
------------------------------------------------------------------------------------
C:\Users\ra20024024> mongofiles -d DBNAME put "FILENAME.png"
                   // Add binary file to DBNAME

C:\Users\ra20024024> mongofiles -d DBNAME list
                   // List the binary files stored in GridFS.

C:\Users\ra20024024> mongofiles -d DBNAME delete "FILENAME.png"
                   // Deletes the file stored in GridFS.


These commands are to be run in MONGO SHELL
----------------------------------------------
> show collections
// OUTPUT collections created by GRIDfs
         fs.chunks
         fs.files

> db.fs.files.find().pretty()
// Displays the metadata on the uploaded file "Penguins.jpg".

> db.fs.files.count()
// count of binary files stored in DB

> db.fs.chunks.find()
// Displays the chunks (which will not be human readable as it is binary data)

> db.fs.chunks.count()
// count of chunks in DB.


